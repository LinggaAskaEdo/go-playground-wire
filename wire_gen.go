// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-co-op/gocron/v2"
	"github.com/google/wire"
	"github.com/linggaaskaedo/go-playground-wire/config"
	"github.com/linggaaskaedo/go-playground-wire/controller"
	"github.com/linggaaskaedo/go-playground-wire/middleware"
	"github.com/linggaaskaedo/go-playground-wire/model/common"
	"github.com/linggaaskaedo/go-playground-wire/repository"
	"github.com/linggaaskaedo/go-playground-wire/service"
	"net/http"
)

// Injectors from wire.go:

func InitializedServer(configuration common.Configuration) (*http.Server, error) {
	newsRepositoryImpl := repository.NewNewsRepository()
	dbOptions := &config.DBOptions{
		Config: configuration,
	}
	db, err := config.NewDB(dbOptions)
	if err != nil {
		return nil, err
	}
	cacheOptions := &config.CacheOptions{
		Config: configuration,
	}
	client, err := config.NewCache(cacheOptions)
	if err != nil {
		return nil, err
	}
	validate := config.NewValidator()
	newsServiceImpl := service.NewNewsService(newsRepositoryImpl, db, client, validate)
	newsControllerImpl := controller.NewNewsController(newsServiceImpl)
	router := config.NewRouter(newsControllerImpl)
	authMiddleware := middleware.NewAuthMiddleware(router, configuration)
	serverOptions := &config.ServerOptions{
		AuthMiddleware: authMiddleware,
		Config:         configuration,
	}
	server := config.NewServer(serverOptions)
	return server, nil
}

func InitializedScheduler(configuration common.Configuration) (gocron.Scheduler, error) {
	newsRepositoryImpl := repository.NewNewsRepository()
	dbOptions := &config.DBOptions{
		Config: configuration,
	}
	db, err := config.NewDB(dbOptions)
	if err != nil {
		return nil, err
	}
	cacheOptions := &config.CacheOptions{
		Config: configuration,
	}
	client, err := config.NewCache(cacheOptions)
	if err != nil {
		return nil, err
	}
	validate := config.NewValidator()
	newsServiceImpl := service.NewNewsService(newsRepositoryImpl, db, client, validate)
	schedulerOptions := &config.SchedulerOptions{
		Config: configuration,
	}
	scheduler, err := config.NewScheduler(newsServiceImpl, schedulerOptions)
	if err != nil {
		return nil, err
	}
	return scheduler, nil
}

// wire.go:

var newsSet = wire.NewSet(repository.NewNewsRepository, wire.Bind(new(repository.NewsRepository), new(*repository.NewsRepositoryImpl)), service.NewNewsService, wire.Bind(new(service.NewsService), new(*service.NewsServiceImpl)), controller.NewNewsController, wire.Bind(new(controller.NewsController), new(*controller.NewsControllerImpl)))
